paths:
  '/CoffeeShops/{id}/reviews/{fk}':
    get:
      tags:
        - CoffeeShop
      summary: Find a related item by id for reviews.
      operationId: CoffeeShop.prototype.__findById__reviews
      parameters:
        - name: fk
          in: path
          description: Foreign key for reviews
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Review'
      deprecated: false
    delete:
      tags:
        - CoffeeShop
      summary: Delete a related item by id for reviews.
      operationId: CoffeeShop.prototype.__destroyById__reviews
      parameters:
        - name: fk
          in: path
          description: Foreign key for reviews
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - CoffeeShop
      summary: Update a related item by id for reviews.
      operationId: CoffeeShop.prototype.__updateById__reviews
      parameters:
        - name: fk
          in: path
          description: Foreign key for reviews
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Review'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Review'
      deprecated: false
  '/CoffeeShops/{id}/reviewers/{fk}':
    get:
      tags:
        - CoffeeShop
      summary: Find a related item by id for reviewers.
      operationId: CoffeeShop.prototype.__findById__reviewers
      parameters:
        - name: fk
          in: path
          description: Foreign key for reviewers
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reviewer'
      deprecated: false
    delete:
      tags:
        - CoffeeShop
      summary: Delete a related item by id for reviewers.
      operationId: CoffeeShop.prototype.__destroyById__reviewers
      parameters:
        - name: fk
          in: path
          description: Foreign key for reviewers
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - CoffeeShop
      summary: Update a related item by id for reviewers.
      operationId: CoffeeShop.prototype.__updateById__reviewers
      parameters:
        - name: fk
          in: path
          description: Foreign key for reviewers
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Reviewer'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reviewer'
      deprecated: false
  '/CoffeeShops/{id}/reviews':
    get:
      tags:
        - CoffeeShop
      summary: Queries reviews of CoffeeShop.
      operationId: CoffeeShop.prototype.__get__reviews
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
      deprecated: false
    post:
      tags:
        - CoffeeShop
      summary: Creates a new instance in reviews of this model.
      operationId: CoffeeShop.prototype.__create__reviews
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Review'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Review'
      deprecated: false
    delete:
      tags:
        - CoffeeShop
      summary: Deletes all reviews of this model.
      operationId: CoffeeShop.prototype.__delete__reviews
      parameters:
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/CoffeeShops/{id}/reviews/count':
    get:
      tags:
        - CoffeeShop
      summary: Counts reviews of CoffeeShop.
      operationId: CoffeeShop.prototype.__count__reviews
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/CoffeeShops/{id}/reviewers':
    get:
      tags:
        - CoffeeShop
      summary: Queries reviewers of CoffeeShop.
      operationId: CoffeeShop.prototype.__get__reviewers
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Reviewer'
      deprecated: false
    post:
      tags:
        - CoffeeShop
      summary: Creates a new instance in reviewers of this model.
      operationId: CoffeeShop.prototype.__create__reviewers
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Reviewer'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reviewer'
      deprecated: false
    delete:
      tags:
        - CoffeeShop
      summary: Deletes all reviewers of this model.
      operationId: CoffeeShop.prototype.__delete__reviewers
      parameters:
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/CoffeeShops/{id}/reviewers/count':
    get:
      tags:
        - CoffeeShop
      summary: Counts reviewers of CoffeeShop.
      operationId: CoffeeShop.prototype.__count__reviewers
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /CoffeeShops:
    post:
      tags:
        - CoffeeShop
      summary: Create a new instance of the model and persist it into the data source.
      operationId: CoffeeShop.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/CoffeeShop'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CoffeeShop'
      deprecated: false
    put:
      tags:
        - CoffeeShop
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: CoffeeShop.upsert__put_CoffeeShops
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/CoffeeShop'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CoffeeShop'
      deprecated: false
    patch:
      tags:
        - CoffeeShop
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: CoffeeShop.upsert__patch_CoffeeShops
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/CoffeeShop'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CoffeeShop'
      deprecated: false
    get:
      tags:
        - CoffeeShop
      summary: Find all instances of the model matched by filter from the data source.
      operationId: CoffeeShop.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/CoffeeShop'
      deprecated: false
  /CoffeeShops/replaceOrCreate:
    post:
      tags:
        - CoffeeShop
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: CoffeeShop.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/CoffeeShop'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CoffeeShop'
      deprecated: false
  /CoffeeShops/upsertWithWhere:
    post:
      tags:
        - CoffeeShop
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: CoffeeShop.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/CoffeeShop'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CoffeeShop'
      deprecated: false
  '/CoffeeShops/{id}/exists':
    get:
      tags:
        - CoffeeShop
      summary: Check whether a model instance exists in the data source.
      operationId: 'CoffeeShop.exists__get_CoffeeShops_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/CoffeeShops/{id}':
    head:
      tags:
        - CoffeeShop
      summary: Check whether a model instance exists in the data source.
      operationId: 'CoffeeShop.exists__head_CoffeeShops_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - CoffeeShop
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: CoffeeShop.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CoffeeShop'
      deprecated: false
    delete:
      tags:
        - CoffeeShop
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: CoffeeShop.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - CoffeeShop
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'CoffeeShop.prototype.updateAttributes__put_CoffeeShops_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/CoffeeShop'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CoffeeShop'
      deprecated: false
    patch:
      tags:
        - CoffeeShop
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'CoffeeShop.prototype.updateAttributes__patch_CoffeeShops_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/CoffeeShop'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CoffeeShop'
      deprecated: false
  '/CoffeeShops/{id}/replace':
    post:
      tags:
        - CoffeeShop
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: CoffeeShop.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/CoffeeShop'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CoffeeShop'
      deprecated: false
  /CoffeeShops/findOne:
    get:
      tags:
        - CoffeeShop
      summary: Find first instance of the model matched by filter from the data source.
      operationId: CoffeeShop.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CoffeeShop'
      deprecated: false
  /CoffeeShops/update:
    post:
      tags:
        - CoffeeShop
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: CoffeeShop.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/CoffeeShop'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /CoffeeShops/count:
    get:
      tags:
        - CoffeeShop
      summary: Count instances of the model matched by where from the data source.
      operationId: CoffeeShop.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /CoffeeShops/status:
    get:
      tags:
        - CoffeeShop
      operationId: CoffeeShop.status
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: string
      deprecated: false
  '/Reviews/{id}/coffeeShop':
    get:
      tags:
        - Review
      summary: Fetches belongsTo relation coffeeShop.
      operationId: Review.prototype.__get__coffeeShop
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CoffeeShop'
      deprecated: false
  '/Reviews/{id}/reviewer':
    get:
      tags:
        - Review
      summary: Fetches belongsTo relation reviewer.
      operationId: Review.prototype.__get__reviewer
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reviewer'
      deprecated: false
  /Reviews:
    post:
      tags:
        - Review
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Review.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Review'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Review'
      deprecated: false
    put:
      tags:
        - Review
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Review.upsert__put_Reviews
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Review'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Review'
      deprecated: false
    patch:
      tags:
        - Review
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Review.upsert__patch_Reviews
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Review'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Review'
      deprecated: false
    get:
      tags:
        - Review
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Review.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
      deprecated: false
  /Reviews/replaceOrCreate:
    post:
      tags:
        - Review
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Review.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Review'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Review'
      deprecated: false
  /Reviews/upsertWithWhere:
    post:
      tags:
        - Review
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Review.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Review'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Review'
      deprecated: false
  '/Reviews/{id}/exists':
    get:
      tags:
        - Review
      summary: Check whether a model instance exists in the data source.
      operationId: 'Review.exists__get_Reviews_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Reviews/{id}':
    head:
      tags:
        - Review
      summary: Check whether a model instance exists in the data source.
      operationId: 'Review.exists__head_Reviews_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Review
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Review.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Review'
      deprecated: false
    delete:
      tags:
        - Review
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Review.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Review
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Review.prototype.updateAttributes__put_Reviews_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Review'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Review'
      deprecated: false
    patch:
      tags:
        - Review
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Review.prototype.updateAttributes__patch_Reviews_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Review'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Review'
      deprecated: false
  '/Reviews/{id}/replace':
    post:
      tags:
        - Review
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Review.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Review'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Review'
      deprecated: false
  /Reviews/findOne:
    get:
      tags:
        - Review
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Review.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Review'
      deprecated: false
  /Reviews/update:
    post:
      tags:
        - Review
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Review.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Review'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Reviews/count:
    get:
      tags:
        - Review
      summary: Count instances of the model matched by where from the data source.
      operationId: Review.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Reviewers/{id}/accessTokens/{fk}':
    get:
      tags:
        - Reviewer
      summary: Find a related item by id for accessTokens.
      operationId: Reviewer.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Reviewer
      summary: Delete a related item by id for accessTokens.
      operationId: Reviewer.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Reviewer
      summary: Update a related item by id for accessTokens.
      operationId: Reviewer.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Reviewers/{id}/reviews/{fk}':
    get:
      tags:
        - Reviewer
      summary: Find a related item by id for reviews.
      operationId: Reviewer.prototype.__findById__reviews
      parameters:
        - name: fk
          in: path
          description: Foreign key for reviews
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Review'
      deprecated: false
    delete:
      tags:
        - Reviewer
      summary: Delete a related item by id for reviews.
      operationId: Reviewer.prototype.__destroyById__reviews
      parameters:
        - name: fk
          in: path
          description: Foreign key for reviews
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Reviewer
      summary: Update a related item by id for reviews.
      operationId: Reviewer.prototype.__updateById__reviews
      parameters:
        - name: fk
          in: path
          description: Foreign key for reviews
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Review'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Review'
      deprecated: false
  '/Reviewers/{id}/accessTokens':
    get:
      tags:
        - Reviewer
      summary: Queries accessTokens of Reviewer.
      operationId: Reviewer.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - Reviewer
      summary: Creates a new instance in accessTokens of this model.
      operationId: Reviewer.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Reviewer
      summary: Deletes all accessTokens of this model.
      operationId: Reviewer.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Reviewers/{id}/accessTokens/count':
    get:
      tags:
        - Reviewer
      summary: Counts accessTokens of Reviewer.
      operationId: Reviewer.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Reviewers/{id}/reviews':
    get:
      tags:
        - Reviewer
      summary: Queries reviews of Reviewer.
      operationId: Reviewer.prototype.__get__reviews
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
      deprecated: false
    post:
      tags:
        - Reviewer
      summary: Creates a new instance in reviews of this model.
      operationId: Reviewer.prototype.__create__reviews
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Review'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Review'
      deprecated: false
    delete:
      tags:
        - Reviewer
      summary: Deletes all reviews of this model.
      operationId: Reviewer.prototype.__delete__reviews
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Reviewers/{id}/reviews/count':
    get:
      tags:
        - Reviewer
      summary: Counts reviews of Reviewer.
      operationId: Reviewer.prototype.__count__reviews
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Reviewers:
    post:
      tags:
        - Reviewer
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Reviewer.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Reviewer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reviewer'
      deprecated: false
    put:
      tags:
        - Reviewer
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Reviewer.upsert__put_Reviewers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Reviewer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reviewer'
      deprecated: false
    patch:
      tags:
        - Reviewer
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Reviewer.upsert__patch_Reviewers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Reviewer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reviewer'
      deprecated: false
    get:
      tags:
        - Reviewer
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Reviewer.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Reviewer'
      deprecated: false
  /Reviewers/replaceOrCreate:
    post:
      tags:
        - Reviewer
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Reviewer.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Reviewer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reviewer'
      deprecated: false
  /Reviewers/upsertWithWhere:
    post:
      tags:
        - Reviewer
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Reviewer.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Reviewer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reviewer'
      deprecated: false
  '/Reviewers/{id}/exists':
    get:
      tags:
        - Reviewer
      summary: Check whether a model instance exists in the data source.
      operationId: 'Reviewer.exists__get_Reviewers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Reviewers/{id}':
    head:
      tags:
        - Reviewer
      summary: Check whether a model instance exists in the data source.
      operationId: 'Reviewer.exists__head_Reviewers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Reviewer
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Reviewer.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reviewer'
      deprecated: false
    delete:
      tags:
        - Reviewer
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Reviewer.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Reviewer
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Reviewer.prototype.updateAttributes__put_Reviewers_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Reviewer'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reviewer'
      deprecated: false
    patch:
      tags:
        - Reviewer
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Reviewer.prototype.updateAttributes__patch_Reviewers_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Reviewer'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reviewer'
      deprecated: false
  '/Reviewers/{id}/replace':
    post:
      tags:
        - Reviewer
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Reviewer.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Reviewer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reviewer'
      deprecated: false
  /Reviewers/findOne:
    get:
      tags:
        - Reviewer
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Reviewer.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Reviewer'
      deprecated: false
  /Reviewers/update:
    post:
      tags:
        - Reviewer
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Reviewer.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Reviewer'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Reviewers/count:
    get:
      tags:
        - Reviewer
      summary: Count instances of the model matched by where from the data source.
      operationId: Reviewer.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Reviewers/login:
    post:
      tags:
        - Reviewer
      summary: Login a user with username/email and password.
      operationId: Reviewer.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:

                - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)

            type: object
      deprecated: false
  /Reviewers/logout:
    post:
      tags:
        - Reviewer
      summary: Logout a user with access token.
      operationId: Reviewer.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Reviewers/confirm:
    get:
      tags:
        - Reviewer
      summary: Confirm a user registration with email verification token.
      operationId: Reviewer.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Reviewers/reset:
    post:
      tags:
        - Reviewer
      summary: Reset password for a user with email.
      operationId: Reviewer.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
definitions:
  x-any:
    properties: {}
  Review:
    properties:
      date:
        description: Date for review submission
        type: string
        format: date
      rating:
        description: Rating scale
        type: number
        format: double
      comments:
        description: Review text
        type: string
      id:
        $ref: '#/definitions/ObjectID'
      coffeeShopId:
        type: number
        format: double
      reviewerId:
        $ref: '#/definitions/ObjectID'
      publisherId:
        $ref: '#/definitions/ObjectID'
    required:
      - date
      - comments
    additionalProperties: false
  Reviewer:
    properties:
      realm:
        type: string
      username:
        type: string
      credentials:
        type: object
      challenges:
        type: object
      email:
        type: string
      emailVerified:
        type: boolean
      status:
        type: string
      created:
        type: string
        format: date
      lastUpdated:
        type: string
        format: date
      id:
        $ref: '#/definitions/ObjectID'
      coffeeShopId:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  CoffeeShop:
    properties:
      name:
        description: Name of the Coffee Shop
        type: string
      city:
        description: City of the Coffee Shop
        type: string
      id:
        type: number
        format: double
    required:
      - name
      - city
    additionalProperties: false
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      created:
        type: string
        format: date
      userId:
        $ref: '#/definitions/ObjectID'
    required:
      - id
    additionalProperties: false
  ObjectID:
    type: string
    pattern: '^[a-fA-F\d]{24}$'
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: coffeeshopreviewapp
  version: 1.0.0
  title: CoffeeShopReviewApp
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
